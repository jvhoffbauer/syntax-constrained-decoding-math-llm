import requests
import json
from datetime import date, datetime, timedelta
import os

from typing import Optional, Dict, Union, List


def v1_reputation_domain_domain(domain: str, toolbench_rapidapi_key: str='088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    "Fetches the reputation of a given domain defined by a confidence score ranging from 0 to 10. 10 being malicious."
    
    """
    url = f"https://malwaredog.p.rapidapi.com/v1/reputation/domain/{domain}"
    querystring = {}
    
    headers = {
            "X-RapidAPI-Key": toolbench_rapidapi_key,
            "X-RapidAPI-Host": "malwaredog.p.rapidapi.com"
        }


    response = requests.get(url, headers=headers, params=querystring)
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation

def v1_history_whois_domain(domain: str, limit: int=50, start: int=0, toolbench_rapidapi_key: str='088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    "Returns a history of WHOIS information for a given domain."
    domain: The domain you wish to query.
        limit: Maximum number of items you wish to return. Limited to 1 MB in the response. Empty or 0 for no limit.
        start: The timestamp (ms) from where you want to query.
        
    """
    url = f"https://malwaredog.p.rapidapi.com/v1/history/whois/{domain}"
    querystring = {}
    if limit:
        querystring['limit'] = limit
    if start:
        querystring['start'] = start
    
    headers = {
            "X-RapidAPI-Key": toolbench_rapidapi_key,
            "X-RapidAPI-Host": "malwaredog.p.rapidapi.com"
        }


    response = requests.get(url, headers=headers, params=querystring)
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation

def v1_history_dns_domain(domain: str, limit: int=50, start: int=0, toolbench_rapidapi_key: str='088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    "Returns the history of DNS information for a given domain. Works for sub-domains."
    domain: The domain you wish to query.
        limit: Maximum number of items you wish to return. Limited to 1 MB in the response. Empty or 0 for no limit.
        start: The timestamp (ms) from where you want to query.
        
    """
    url = f"https://malwaredog.p.rapidapi.com/v1/history/dns/{domain}"
    querystring = {}
    if limit:
        querystring['limit'] = limit
    if start:
        querystring['start'] = start
    
    headers = {
            "X-RapidAPI-Key": toolbench_rapidapi_key,
            "X-RapidAPI-Host": "malwaredog.p.rapidapi.com"
        }


    response = requests.get(url, headers=headers, params=querystring)
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation

def v1_domain_domain(domain: str, toolbench_rapidapi_key: str='088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    "Fetch information about a given domain. Query will return information about; WHOIS, DNS, open ports and the reputation or the domain and its resolved IP addresses."
    domain: The domain you wish to query.
        
    """
    url = f"https://malwaredog.p.rapidapi.com/v1/domain/{domain}"
    querystring = {}
    
    headers = {
            "X-RapidAPI-Key": toolbench_rapidapi_key,
            "X-RapidAPI-Host": "malwaredog.p.rapidapi.com"
        }


    response = requests.get(url, headers=headers, params=querystring)
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation

def v1_ip_ip(ip: str, toolbench_rapidapi_key: str='088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    "Fetch information about a given IP address. Query will return information about; open ports and the reputation or the IP address."
    
    """
    url = f"https://malwaredog.p.rapidapi.com/v1/ip/{ip}"
    querystring = {}
    
    headers = {
            "X-RapidAPI-Key": toolbench_rapidapi_key,
            "X-RapidAPI-Host": "malwaredog.p.rapidapi.com"
        }


    response = requests.get(url, headers=headers, params=querystring)
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation

def v1_reputation_ip_ip(ip: str, toolbench_rapidapi_key: str='088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    "Fetches the reputation of a given ip address defined by a confidence score ranging from 0 to 10. 10 being malicious."
    ip: IPv4 or IPv6 address
        
    """
    url = f"https://malwaredog.p.rapidapi.com/v1/reputation/ip/{ip}"
    querystring = {}
    
    headers = {
            "X-RapidAPI-Key": toolbench_rapidapi_key,
            "X-RapidAPI-Host": "malwaredog.p.rapidapi.com"
        }


    response = requests.get(url, headers=headers, params=querystring)
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation

def v1_search_search(search: str, toolbench_rapidapi_key: str='088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    "Search for either a domain or ip address."
    
    """
    url = f"https://malwaredog.p.rapidapi.com/v1/search/{search}"
    querystring = {}
    
    headers = {
            "X-RapidAPI-Key": toolbench_rapidapi_key,
            "X-RapidAPI-Host": "malwaredog.p.rapidapi.com"
        }


    response = requests.get(url, headers=headers, params=querystring)
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation

