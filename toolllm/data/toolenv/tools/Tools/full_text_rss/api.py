import requests
import json
from datetime import date, datetime, timedelta
import os

from typing import Optional, Dict, Union, List


def convert_feed(url: str, format: str='json', max: int=5, summary: int=1, use_extracted_title: int=1, links: str='remove', xss: int=1, lang: int=2, accept: str='auto', content: str='1', parser: str='html5php', toolbench_rapidapi_key: str='088440d910mshef857391f2fc461p17ae9ejsnaebc918926ff'):
    """
    "Convert a partial feed to a full-text feed. Outputs an RSS 2.0 feed (XML or JSON) containing the full content extracted from the input URL. The input URL can be a partial feed or a web page."
    url: URL to a partial feed or a standard HTML page. You can omit the 'http://' prefix if you like.
        format: The default output is RSS. The only other valid output format is JSON. To get JSON output, pass format=json in the querystring. Exclude it from the URL (or set it to ‘rss’) if you’d like RSS.
        max: Feed input only - the maximum number of feed items to process.
        summary: If set to 1, an excerpt will be included for each item in the output.
        use_extracted_title: Feed input only - item titles in the original feed do not get changed by default - we assume item titles in feeds are not truncated. If you'd like them to be replaced with titles Full-Text RSS extracts, use this parameter in the request (the value does not matter).
        links: Links can either be preserved (default), made into footnotes, or removed. None of these options affect the link text, only the hyperlink itself. Valid values: 'preserve', 'remove', 'footnotes'
        xss: Use this to enable XSS filtering. We have not enabled this by default because we assume the majority of our users do not display the HTML retrieved by Full-Text RSS in a web page without further processing. If you subscribe to our generated feeds in your news reader application, it should, if it's good software, already filter the resulting HTML for XSS attacks, making it redundant for Full-Text RSS do the same. Similarly with frameworks/CMSs which display feed content - the content should be treated like any other user-submitted content.  If you are writing an application yourself which is processing feeds generated by Full-Text RSS, you can either filter the HTML yourself to remove potential XSS attacks or enable this option. This might be useful if you are processing our generated feeds with JavaScript on the client side - although there's client side xss filtering available too.  Note: if enabled this will also remove certain elements you may want to preserve, such as iframes.
        lang: Language detection. If you'd like Full-Text RSS to find the language of the articles it processes, you can use one of the following values:  0 - Ignore language; 1 - Use article metadata (e.g. HTML lang attribute) or feed metadata (default value); 2 - As above, but guess the language if it's not specified; 3 - Always guess the language, whether it's specified or not. If language detection is enabled and a match is found, the language code will be returned in the <dc:language> element inside the <item> element.
        accept: Tell Full-Text RSS what it should expect when fetching the input URL. By default Full-Text RSS tries to guess whether the response is a feed or regular HTML page. It's a good idea to be explicit by passing the appropriate type in this parameter. This is useful if, for example, a feed stops working and begins to return HTML or redirecs to a HTML page as a result of site changes. In such a scenario, if you've been explicit about the URL being a feed, Full-Text RSS will not parse HTML returned in response. If you pass accept=html (previously html=1), Full-Text RSS will not attempt to parse the response as a feed. This increases performance slightly and should be used if you know that the URL is not a feed.  Note: If excluded, or set to auto, Full-Text RSS first tries to parse the server's response as a feed, and only if it fails to parse as a feed will it revert to HTML parsing. In the default parse-as-feed-first mode, Full-Text RSS will identify itself as PHP first and only if a valid feed is returned will it identify itself as a browser in subsequent requests to fetch the feed items. In parse-as-html mode, Full-Text RSS will identify itself as a browser from the very first request.
        content: If set to 0, the extracted content will not be included in the output. Set to 'html' or 'text' for plain text output (wrapped at 70 chars). 'text0' to disable forced text wrapping. 'text##' to wrap after ## characters, e.g. 'text80'.
        parser: The default parser is Gumbo, a fast HTML5 parser. HTML5-PHP is an HTML5 parser implemented in PHP. It's slower, but can often produce better results. Use this parameter to explicitly request 'gumbo', 'html5-php', or 'libxml' parsing.
        
    """
    url = f"https://full-text-rss.p.rapidapi.com/makefulltextfeed.php"
    querystring = {'url': url, }
    if format:
        querystring['format'] = format
    if max:
        querystring['max'] = max
    if summary:
        querystring['summary'] = summary
    if use_extracted_title:
        querystring['use_extracted_title'] = use_extracted_title
    if links:
        querystring['links'] = links
    if xss:
        querystring['xss'] = xss
    if lang:
        querystring['lang'] = lang
    if accept:
        querystring['accept'] = accept
    if content:
        querystring['content'] = content
    if parser:
        querystring['parser'] = parser
    
    headers = {
            "X-RapidAPI-Key": toolbench_rapidapi_key,
            "X-RapidAPI-Host": "full-text-rss.p.rapidapi.com"
        }


    response = requests.get(url, headers=headers, params=querystring)
    try:
        observation = response.json()
    except:
        observation = response.text
    return observation

